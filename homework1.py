# -*- coding: utf-8 -*-
"""Homework1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MRnP1KjZP1-68aAjDWF4NmNA54B6NLHr

# **Algorithmic Methods of Data Mining**


#### Andrea Polidori
<polidori.2143429@studenti.uniroma1.it>

## **#1 Homework: HackerRank and AWS**

### **Problema 1**

#### Esercizio 1.1.1
The above code will print Hello, World! on your screen. Try it yourself in the editor below!
"""

print("Hello, World!")

"""#### Esercizio 1.1.2
Given an integer, n, perform the following conditional actions:

If  is odd, print Weird.
If  is even and in the inclusive range of to, print Not Weird.
If  is even and in the inclusive range of to, print Weird.
If  is even and greater than, print Not Weird.

"""

n = int(input().strip())
    if(n%2!=0):
        print("Weird")
    else:
        if(n>=2 and n<=5):
            print("Not Weird")
        elif(n>=6 and n<=20):
            print("Weird")
        elif(n>20):
            print("Not Weird")

"""#### Esercizio 1.1.3
The provided code stub reads two integers from STDIN, a and b. Add code to print three lines where:

The first line contains the sum of the two numbers.
The second line contains the difference of the two numbers (first - second).
The third line contains the product of the two numbers.
"""

a = int(input())
    b = int(input())
    print(a+b)
    print(a-b)
    print(a*b)

"""#### Esercizio 1.1.4
The provided code stub reads two integers,  and , from STDIN.

Add logic to print two lines. The first line should contain the result of integer division,  // . The second line should contain the result of float division,  / .

No rounding or formatting is necessary.
"""

a = int(input())
    b = int(input())
    print(a//b)
    print(a/b)

"""#### Esercizio 1.1.5
The provided code stub reads and integer, n, from STDIN. For all non-negative integers i<n, print i^2
"""

n = int(input())
    if n>=1 and n<=20:
        nn=range(0,n)
        for i in nn:
            print(i**2)

"""#### Esercizio 1.1.6
Given a year, determine whether it is a leap year. If it is a leap year, return the Boolean True, otherwise return False.

Note that the code stub provided reads from STDIN and passes arguments to the is_leap function. It is only necessary to complete the is_leap function.
"""

leap = False
    if (year%4==0):
        leap=True
        if (year%100==0):
            leap=False
            if (year%400==0):
                leap=True
    return leap

"""#### Esercizio 1.1.7
Print the list of integers from  through  as a string, without spaces.
"""

n = int(input())
    if (n>=1 and n<=150):
      for i in range(1,n+1):
        print(i, end="")

"""#### Esercizio 1.2.1
Print the list in lexicographic increasing order.
"""

x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    lista=[]
    for i in range(0, x+1):
        for j in range(0, y+1):
            for k in range(0, z+1):
                if (i+j+k!=n):
                    lista.append([i,j,k])
    print(lista)

"""#### Esercizio 1.2.2
Given the participants' score sheet for your University Sports Day, you are required to find the runner-up score. You are given  scores. Store them in a list and find the score of the runner-up.
"""

n = int(input())
arr = map(int, input().split())

"""#### Esercizio 1.2.3
Given the names and grades for each student in a class of N students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade.
"""

studenti=[]
    for _ in range(int(input())):
        name = input()
        score = float(input())
        studenti.append([name, score])
    scores=list(set(stud[1] for stud in studenti))
    score_ord=sorted(scores)
    student_res=[stud for stud in studenti if stud[1]==score_ord[1]]
    student_res.sort()
    for stud in student_res:
      print(stud[0])

"""#### Esercizio 1.2.4
The provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal.
"""

n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    lista=list(student_marks[query_name])
    res=sum(student_marks[query_name])/3
    print(format(res, ".2f"))

"""#### Esercizio 1.2.5
For each command of type print, print the list on a new line.
"""

N = int(input())
    lista=[];
    for _ in range(N):
        funz=input().split();
        if funz[0] == "insert":
            lista.insert(int(funz[1]),int(funz[2]))
        elif funz[0] == "print":
            print(lista)
        elif funz[0] == "remove":
            lista.remove(int(funz[1]))
        elif funz[0] == "append":
            lista.append(int(funz[1]))
        elif funz[0] == "sort":
            lista.sort();
        elif funz[0] == "pop":
            lista.pop();
        else:
            lista.reverse();

"""#### Esercizio 1.2.6
Given an integer, n, and n space-separated integers as input, create a tuple, t, of those n integers. Then compute and print the result of hash(t).
"""

n = int(input())
    integer_list = map(int, input().split())
    integer_list=tuple(integer_list)
    print(hash(integer_list))

"""#### Esercizio 1.3.1
You are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.
"""

new=""
    for i in s:
      if i.isupper():
        new+=i.lower()
      else:
        new+=i.upper()
    return new

"""#### Esercizio 1.3.2
You are given a string. Split the string on a " " (space) delimiter and join using a - hyphen.

"""

def split_and_join(line):
    new=""
    new=line.split(" ")
    newdef="-".join(new)
    return newdef

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)

"""#### Esercizio 1.3.3
You are given the firstname and lastname of a person on two different lines.
"""

def print_full_name(first, last):
    print("Hello {} {}! You just delved into python.".format(first, last))

"""#### Esercizio 1.3.4
We have seen that lists are mutable (they can be changed), and tuples are immutable (they cannot be changed).

Let's try to understand this with an example.

You are given an immutable string, and you want to make changes to it.
"""

def mutate_string(string, position, character):
    new=""
    new=string[:position]+character+string[position+1:]
    return new

"""#### Esercizio 1.3.5
In this challenge, the user enters a string and a substring. You have to print the number of times that the substring occurs in the given string. String traversal will take place from left to right, not from right to left.
"""

def count_substring(string, sub_string):
    counter=0
    for _ in range(len(string)):
      if (string.find(sub_string)!=-1):
        counter+=1
        string=string[string.find(sub_string)+1:]
    return counter

"""#### Esercizio 1.3.6
You are given a string S.
Your task is to find out if the string S contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.
"""

s = input()
    print(any(char.isalnum() for char in s))
    print(any(char.isalpha() for char in s))
    print(any(char.isdigit() for char in s))
    print(any(char.islower() for char in s))
    print(any(char.isupper() for char in s))

"""
#### Esercizio 1.3.7
You are given a partial code that is used for generating the HackerRank Logo of variable thickness.
Your task is to replace the blank (______) with rjust, ljust or center."""

thickness = int(input())
c = 'H'
if(thickness>0 and thickness<50):
  if(thickness%2!=0):
    for i in range(thickness):
        print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

    for i in range(thickness+1):  print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

    for i in range((thickness+1)//2):
        print((c*thickness*5).center(thickness*6))

    for i in range(thickness+1): print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

    for i in range(thickness):  print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

"""#### Esercizio 1.3.8
Output the design pattern.
"""

N, M=map(int,input().split())
if (M==3*N):
  for i in range(N//2):
    j = int((2*i)+1)
    print(('.|.'*j).center(M, '-'))
  print('WELCOME'.center(M,'-'))
  for i in reversed(range(N//2)):
    j = int((2*i)+1)
    print(('.|.'*j).center(M, '-'))
else:
  print("Invalid Data")

"""#### Esercizio 1.3.9
You are given a string s and width w.
Your task is to wrap the string into a paragraph of width w.
"""

def wrap(string, max_width):
    return textwrap.fill(string, max_width)

"""#### Esercizio 1.3.10
Given an integer, n, print the following values for each integer i from 1 to n:

Decimal;
Octal;
Hexadecimal(capitalized);
Binary.

"""

def print_formatted(number):
    for i in range(1, number+1):
        decimal = str(i)
        octal = oct(i)[2:]
        hexadecimal = hex(i)[2:].upper()
        binary = bin(i)[2:]
        width = len(bin(number)[2:])
        print(decimal.rjust(width),octal.rjust(width),hexadecimal.rjust(width),binary.rjust(width))

"""#### Esercizio 1.3.11
You are given an integer, N. Your task is to print an alphabet rangoli of size N. (Rangoli is a form of Indian folk art based on creation of patterns.)
"""

def print_rangoli(size):
    a = "abcdefghijklmnopqrstuvwxyz"
    riga = []
    for row in range(size):
        print_ = "-".join(a[row:size])
        riga.append(print_[::-1] + print_[1:])
    width = len(riga[0])
    for row in range(size-1, 0, -1):
        print(riga[row].center(width, '-'))

    for row in range(size):
        print(riga[row].center(width, '-'))

"""#### Esercizio 1.3.12
Given a full name, your task is to capitalize the name appropriately.
"""

def solve(s):
    ans = s.split(' ')
    ans = (((i.capitalize() for i in ans)))
    res=' '.join(ans)
    return res

"""#### Esercizio 1.3.13
Both players are given the same string, S.
Both players have to make substrings using the letters of the string S.
Stuart has to make words starting with consonants.
Kevin has to make words starting with vowels.
The game ends when both players have made all possible substrings.
"""

def minion_game(string):
    vocali, consonanti=0, 0
    if (len(string)>0 and len(string)<=1000000):
      for i in range(len(string)):
          if string[i] in 'AEIOU':
            vocali+=(len(string)-i)
          else:
            consonanti+=(len(string)-i)
      if vocali < consonanti:
          print('Stuart {}'.format(consonanti))
      elif vocali > consonanti:
          print('Kevin {}'.format(vocali))
      else:
          print('Draw')

"""#### Esercizio 1.3.14
Merge The Tools
"""

NULL

"""#### Esercizio 1.4.1
A set is an unordered collection of elements without duplicate entries.
When printed, iterated or converted into a sequence, its elements will appear in an arbitrary order.
"""

def average(array):
    array=set(array)
    n=len(array)
    aver=float(sum(array)/n)
    return aver

"""#### Esercizio 1.4.2
No Idea! Challenge
"""

n, m = map(int, input().split())
if (n>=1 and n<=100000):
    if(m>=1 and m<=100000):
        res=0
        arr = map(int, input().split())
        A = set(map(int, input().split()))
        B = set(map(int, input().split()))
        for i in arr:
            if i in A:
              res+=1
            if i in B:
              res-=1

        print(res)
    else:
        print("Invalid Data")
else:
    print("Invalid Data")

"""#### Esercizio 1.4.3
Given 2 sets of integers, M and N, print their symmetric difference in ascending order. The term symmetric difference indicates those values that exist in either M or N but do not exist in both.
"""

m=int(input())
a=set(map(int, input().split()))
n=int(input())
b=set(map(int, input().split()))
lis=list(a.difference(b) | b.difference(a))
lis.sort()
for i in range(len(lis)):
    print(lis[i])

"""#### Esercizio 1.4.4
If we want to add a single element to an existing set, we can use the .add() operation.
It adds the element to the set and returns 'None'.
"""

n=int(input())
country=set()
if(n>0 and n<1000):
    for _ in range(n):
        country.add(input())
    res=len(country)
    print(res)

"""#### Esercizio 1.4.5
You have a non-empty set s, and you have to execute N commands given in N lines.

The commands will be pop, remove and discard.


"""

NULL

"""#### Esercizio 1.4.6
The students of District College have subscriptions to English and French newspapers. Some students have subscribed only to English, some have subscribed to only French and some have subscribed to both newspapers.

You are given two sets of student roll numbers. One set has subscribed to the English newspaper, and the other set is subscribed to the French newspaper. The same student could be in both sets. Your task is to find the total number of students who have subscribed to at least one newspaper.
"""

n=int(input())
s1=set(map(int, input().split()))
b=int(input())
s2=set(map(int, input().split()))
stot=set()
stot=s1.union(s2)
if(len(stot)>0 and len(stot)<1000):
    res=len(stot)
    print(res)

"""#### Esercizio 1.4.7
The students of District College have subscriptions to English and French newspapers. Some students have subscribed only to English, some have subscribed only to French, and some have subscribed to both newspapers.

You are given two sets of student roll numbers. One set has subscribed to the English newspaper, one set has subscribed to the French newspaper. Your task is to find the total number of students who have subscribed to both newspapers.
"""

n=int(input())
s1=set(map(int, input().split()))
b=int(input())
s2=set(map(int, input().split()))
stot=set()
stot=s1.intersection(s2)
if(len(stot)>0 and len(stot)<1000):
    res=len(stot)
    print(res)

"""#### Esercizio 1.4.8
Students of District College have a subscription to English and French newspapers. Some students have subscribed to only the English newspaper, some have subscribed to only the French newspaper, and some have subscribed to both newspapers.

You are given two sets of student roll numbers. One set has subscribed to the English newspaper, and one set has subscribed to the French newspaper. Your task is to find the total number of students who have subscribed to only English newspapers.
"""

n=int(input())
s1=set(map(int, input().split()))
b=int(input())
s2=set(map(int, input().split()))
stot=set()
stot=s1.union(s2)
diff=s1.difference(s2)
if(len(stot)>0 and len(stot)<1000):
    res=len(diff)
    print(res)

"""#### Esercizio 1.4.9
Students of District College have subscriptions to English and French newspapers. Some students have subscribed to English only, some have subscribed to French only, and some have subscribed to both newspapers.

You are given two sets of student roll numbers. One set has subscribed to the English newspaper, and one set has subscribed to the French newspaper. Your task is to find the total number of students who have subscribed to either the English or the French newspaper but not both.
"""

n=int(input())
s1=set(map(int, input().split()))
b=int(input())
s2=set(map(int, input().split()))
stot=set()
stot=s1.union(s2)
simdif=s1.symmetric_difference(s2)
if(len(stot)>0 and len(stot)<1000):
    res=len(simdif)
    print(res)

"""#### Esercizio 1.4.10
You are given a set A and N number of other sets. These N number of sets have to perform some specific mutation operations on set A.

Your task is to execute those operations and print the sum of elements from set A.


"""

n=int(input())
A=set(map(int, input().split()))
N=int(input())
for _ in range(N):
    comand = input().split()
    new= set(map(int, input().split()))
    eval('A.{}({})'.format(comand[0], new))

print(sum(A))

"""#### Esercizio 1.4.11
The Captain's Room challenge
"""

K=int(input())
A=list(map(int, input().split()))
sett=set(A)
res =((sum(sett)*K)-sum(A))//(K-1)
print(res)

"""
#### Esercizio 1.4.12
You are given two sets, A and B.
Your job is to find whether set A is a subset of set B.

If set A is subset of set B, print True.
If set A is not a subset of set B, print False."""

T=int(input())
if(T>0 and T<21):
    for _ in range(T):
        n=int(input())
        a=set(input().split())
        m=int(input())
        b=set(input().split())
        if(len(a)<1001 or len(b)<1001):
            diff=a.difference(b)
            if(len(diff)):
                print("False")
            else:
                print("True")

"""#### Esercizio 1.4.13
Print True if set A is a strict superset of all other N sets. Otherwise, print False.
"""

A=set(map(int, input().split()))
n=int(input())
count=0
for _ in range(n):
    b=set(map(int, input().split()))
    if(len(b.difference(A))==0):
        count+=1
if(count==n):
    print("True")
else:
    print("False")

"""#### Esercizio 1.5.1
Raghu is a shoe shop owner. His shop has X number of shoes.
He has a list containing the size of each shoe he has in his shop.
There are N number of customers who are willing to pay xi amount of money only if they get the shoe of their desired size.

Your task is to compute how much money Raghu earned.
"""

import collections
X=int(input())
lista=collections.Counter(map(int, input().split()))
N=int(input())
res=0
for _ in range(N):
    taglia, acq=map(int, input().split())
    if lista[taglia]:
        res+=acq
        lista[taglia]-=1
print(res)

"""#### Esercizio 1.5.2
In this challenge, you will be given 2 integers, n and m. There are n words, which might repeat, in word group A. There are m words belonging to word group B. For each m words, check whether the word has appeared in group A or not. Print the indices of each occurrence of m in group A. If it does not appear, print -1.
"""

n, m=map(int, input().split())
import collections
d=collections.defaultdict(list)
for i in range(1,n+1):
    d[input()].append(str(i))
for j in range(m):
    print(' '.join(d[input()]) or -1)

"""#### Esercizio 1.5.3
Dr. John Wesley has a spreadsheet containing a list of student's ID,mark, class and name.

Your task is to help Dr. Wesley calculate the average marks of the students.
"""

import collections
N=int(input())
categories=input().split()
somma=0
for _ in range(N):
    Student=collections.namedtuple('student', categories)
    ID, MARKS, CLASS, NAME= input().split()
    student = Student(ID, MARKS, CLASS, NAME)
    somma+=int(student.MARKS)
average=somma/N
print('{:.2f}'.format(average))

"""#### Esercizio 1.5.4
You are the manager of a supermarket.
You have a list of N items together with their prices that consumers bought on a particular day.
Your task is to print each item_name and net_price in order of its first occurrence.
"""

N=int(input())
import collections
ordine = collections.OrderedDict()
for _ in range(N):
    item, space, prezzo = input().rpartition(' ')
    ordine[item] = ordine.get(item, 0) + int(prezzo)
for item, prezzo in ordine.items():
    print(item, prezzo)

"""#### Esercizio 1.5.5
You are given n words. Some words may repeat. For each word, output its number of occurrences. The output order should correspond with the input order of appearance of the word. See the sample input/output for clarification.
"""

n=int(input())
import collections
lista=[]
for i in range(n):
    lista.append(input().strip())
res=collections.Counter(lista)
print(len(res))
print(*res.values())

"""#### Esercizio 1.5.6
Perform append, pop, popleft and appendleft methods on an empty deque d.


"""

NULL

"""#### Esercizio 1.5.7
A newly opened multinational brand has decided to base their company logo on the three most common characters in the company name. They are now trying out various combinations of company names and logos based on this condition. Given a string , which is the company name in lowercase letters, your task is to find the top three most common characters in the string.

Print the three most common characters along with their occurrence count.
Sort in descending order of occurrence count.
If the occurrence count is the same, sort the characters in alphabetical order.
"""

s = input()
    S = sorted(s)
    frequenza = collections.Counter(list(S))
    for k, v in frequenza.most_common(3):
        print(k, v)

"""#### Esercizio 1.5.8
When stacking the cubes, you can only pick up either the leftmost or the rightmost cube each time. Print Yes if it is possible to stack the cubes. Otherwise, print No.
"""

NULL

"""#### Esercizio 1.6.1
You are given a date. Your task is to find what the day is on that date.
"""

import calendar
day=list(map(int, input().split()))
if (day[2]>2000 and day[2]<3000):
    wd=calendar.day_name[calendar.weekday(day[2], day[0], day[1])]
    print(wd.upper())

"""#### Esercizio 1.6.2
When users post an update on social media,such as a URL, image, status update etc., other users in their network are able to view this new post on their news feed. Users can also see exactly when the post was published, i.e, how many hours, minutes or seconds ago.

Since sometimes posts are published and viewed in different time zones, this can be confusing. You are given two timestamps of one such post that a user can see on his newsfeed in the following format:

Day dd Mon yyyy hh:mm:ss +xxxx

Here +xxxx represents the time zone. Your task is to print the absolute difference (in seconds) between them.
"""

formatt = '%a %d %b %Y %H:%M:%S %z'

# Complete the time_delta function below.
def time_delta(t1, t2):
    t1 = datetime.datetime.strptime(t1, formatt)
    t2 = datetime.datetime.strptime(t2, formatt)
    return str(int(abs((t1-t2).total_seconds())))

"""#### Esercizio 1.7
You are given two values a and b.
Perform integer division and print a/b.
"""

pT=int(input())
for _ in range(T):
    try:
        a, b=input().split()
        print(int(a)//int(b))
    except ZeroDivisionError as e:
        print("Error Code:", e)
    except ValueError as e:
        print("Error Code:", e)

"""#### Esercizio 1.8.1
he National University conducts an examination of N students in X subjects.
Your task is to compute the average scores of each student.
"""

N, X=map(int, input().split())
a=list()
for _ in range(X):
    marks=map(float, input().split())
    a.append(marks)
for i in zip(*a):
    print(sum(i)/len(i))

"""#### Esercizio 1.8.2
You are given a spreadsheet that contains a list of N athletes and their details (such as age, height, weight and so on). You are required to sort the data based on the Kth attribute and print the final resulting table. Follow the example given below for better understanding.


"""

array=sorted(arr, key=lambda row: row[k])
    for i in range(len(array)):
        for j in range(len(array[i])):
            print(array[i][j], end=' ')
        print()

"""#### Esercizio 1.8.3
Your task is to sort the string S in the following manner:

All sorted lowercase letters are ahead of uppercase letters.
All sorted uppercase letters are ahead of digits.
All sorted odd digits are ahead of sorted even digits.
"""

def ginortS(string):
    lower = []
    upper = []
    odd = []
    even = []
    for c in string:
        if c.islower():
            lower.append(c)
        elif c.isupper():
            upper.append(c)
        elif c.isdigit():
            if (int(c) %2)==0:
                even.append(c)
            else:
                odd.append(c)
    return (''.join(sorted(lower)+sorted(upper)+sorted(odd)+sorted(even)))

if __name__=='__main__':
    string=input()
    print(ginortS(string))

"""#### Esercizio 1.9
Let's learn some new Python concepts! You have to generate a list of the first n fibonacci numbers, 0 being the first number. Then, apply the map function and a lambda expression to cube each fibonacci number and print the list.


"""

cube = lambda x: x**3

def fibonacci(n):
    l=[0,1]
    for i in range(2, n):
        l.append(l[i-2]+l[i-1])
    return (l[0:n])

"""#### Esercizio 1.10.1
You are given a string N.
Your task is to verify that N is a floating point number.
"""

T=int(input())
from re import match, compile
formato = compile('^[-+]?[0-9]*\.[0-9]+$')
for _ in range(T):
    print(bool(formato.match(input())))

"""#### Esercizio 1.10.2
You are given a string  consisting only of digits 0-9, commas ,, and dots .

Your task is to complete the regex_pattern defined below, which will be used to re.split() all of the , and . symbols in s.

It’s guaranteed that every comma and every dot in  is preceeded and followed by a digit.
"""

regex_pattern = r'[.,]+'

"""#### Esercizio 1.10.3
You are given a string S.
Your task is to find the first occurrence of an alphanumeric character in S (read from left to right) that has consecutive repetitions.
"""

import re

m = re.search(r'([a-zA-Z0-9])\1', input().strip())
print(m.group(1) if m else -1)

"""#### Esercizio 1.10.4
You are given a string S. It consists of alphanumeric characters, spaces and symbols(+,-).
Your task is to find all the substrings of S that contains 2 or more vowels.
Also, these substrings must lie in between 2 consonants and should contain vowels only.
"""

NULL

"""
#### Esercizio 1.10.5
You are given a string S.
Your task is to find the indices of the start and end of string k in S."""

import re
string = input()
substring = input()
pattern = re.compile(substring)
match = pattern.search(string)
if not match: print('(-1, -1)')
while match:
    print('({0}, {1})'.format(match.start(), match.end() - 1))
    match = pattern.search(string, match.start() + 1)

"""#### Esercizio 1.10.6
Regex Substitution challenge
"""

import re
N=int(input())
for _ in range(N):
    print(re.sub(r'(?<= )(&&|\|\|)(?= )', lambda x: 'and' if x.group() == '&&' else 'or', input()))

"""#### Esercizio 1.10.7
Validating Roman Numerals challenge
"""

regex_pattern = r"M{0,3}(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[VX]|V?I{0,3})$"	# Do not delete 'r'.

"""#### Esercizio 1.10.8
Validating phone numbers
"""

import re
N=int(input())
for _ in range(N):
    if re.match(r'[789]\d{9}$', input()):
        print('YES')
    else:
        print('NO')

"""#### Esercizio 1.10.9
Validating and Parsing Email Addresses
"""

n=int(input())
import re
formato=r'^<[A-Za-z](\w|-|\.|_)+@[A-Za-z]+\.[A-Za-z]{1,3}>$'
for _ in range(n):
    nome, email=input().split(' ')
    if re.match(formato, email):
        print(nome, email)

"""#### Esercizio 1.10.10
Hex Color Code
"""

N=int(input())
import re
for _ in range(N):
    matches = re.findall(r':?.(#[0-9a-fA-F]{6}|#[0-9a-fA-F]{3})', input())
    if matches:
        print(*matches, sep='\n')

"""#### Esercizio 1.10.11
HTML Parser - Part 1
"""

N=int(input())
from html.parser import HTMLParser
class MyHTMLParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
        print('Start :', tag)
        for element in attrs:
            print('->', element[0], '>', element[1])

    def handle_endtag(self, tag):
        print('End   :', tag)

    def handle_startendtag(self, tag, attrs):
        print('Empty :', tag)
        for element in attrs:
            print('->', element[0], '>', element[1])
html = MyHTMLParser()
for _ in range(N):
    html.feed(input())

"""#### Esercizio 1.10.12
HTML Parser - Part 2
"""

from html.parser import HTMLParser

class MyHTMLParser(HTMLParser):
    def handle_comment(self, data):
        if ('\n' in data):
            print('>>> Multi-line Comment')
        else:
            print('>>> Single-line Comment')
        print(data)

    def handle_data(self, data):
        if data == '\n': return
        print('>>> Data')
        print(data)







html = ""
for i in range(int(input())):
    html += input().rstrip()
    html += '\n'

parser = MyHTMLParser()
parser.feed(html)
parser.close()

"""#### Esercizio 1.10.13
Validating Credit Card Numbers
"""

N=int(input())
import re
pattern = re.compile(r'^(?!.*(\d)(-?\1){3})[456]\d{3}(?:-?\d{4}){3}$')
for _ in range(N):
    if (pattern.search(input().strip())):
        print('Valid')
    else:
        print('Invalid')

"""#### Esercizio 1.10.14
Validating Postal Codes
"""

regex_integer_in_range = r"^[1-9][\d]{5}$"	# Do not delete 'r'.
regex_alternating_repetitive_digit_pair = r"(\d)(?=\d\1)"	# Do not delete 'r'.

"""#### Esercizio 1.10.15
Detect HTML Tags, Attributes and Attribute Values
"""

NULL

"""#### Esercizio 1.10.16
Validating UID
"""

NULL

"""#### Esercizio 1.10.17
Matrix Script
"""

NULL

"""#### Esercizio 1.1.1
You are given a valid XML document, and you have to print its score. The score is calculated by the sum of the score of each element. For any element, the score is equal to the number of attributes it has.
"""

def get_attr_number(node):
    return len(node.attrib) + sum(get_attr_number(child) for child in node)

"""#### Esercizio 1.11.2
You are given a valid XML document, and you have to print the maximum level of nesting in it. Take the depth of the root as 0.
"""

maxdepth = 0
def depth(elem, level):
    global maxdepth
    if (level==maxdepth):
        maxdepth+=1
    for subnode in elem:
        depth(subnode, level+1)

"""#### Esercizio 1.12.1
The given mobile numbers may have +91, 91 or 0 written before the actual 10 digit number. Alternatively, there may not be any prefix at all.
"""

def wrapper(f):
    def fun(l):
        f(['+91 '+c[-10:-5]+' '+c[-5:] for c in l])
    return fun

"""#### Esercizio 1.12.2
Let's use decorators to build a name directory! You are given some information about N people. Each person has a first name, last name, age and sex. Print their names in a specific format sorted by their age in ascending order i.e. the youngest person's name should be printed first. For two people of the same age, print them in the order of their input.

"""

def person_lister(f):
    def inner(people):
        return map(f, sorted(people, key=lambda age: int(age[2])))
    return inner

"""#### Esercizio 1.13.1
Arrays
"""

def arrays(arr):
    return (numpy.array(arr[::-1], float))

"""#### Esercizio 1.13.2
Shape and Reshape
"""

import numpy
arr=list(map(int, input().split()))
my_array = numpy.array(arr)
print(numpy.reshape(my_array, (3, 3)))

"""#### Esercizio 1.13.3
Transpose and Flatten
"""

import numpy



n, m=map(int, input().split())
column = numpy.array([input().strip().split() for _ in range(n)], int)
print(column.transpose())
print(column.flatten())

"""#### Esercizio 1.13.4
Zeros and Ones
"""

import numpy



a=tuple(map(int, input().split()))
print(numpy.zeros(a, dtype=int))
print(numpy.ones(a, dtype=int))

"""#### Esercizio 1.13.5
Concatenate
"""

import numpy



n, m, p=map(int, input().split())
nump = numpy.array([input().split() for _ in range(n)], int)
arr = numpy.array([input().split() for _ in range(m)], int)
print(numpy.concatenate((nump, arr), axis=0))

"""#### Esercizio 1.13.6
Array Mathematics
"""

import numpy


n, m = map(int, input().split())
a = (numpy.array([input().split() for _ in range(n)], int))
b = (numpy.array([input().split() for _ in range(n)], int))
print(a + b, a - b, a * b, a // b, a % b, a ** b, sep='\n')

"""#### Esercizio 1.13.7
Eye and Identity
"""

import numpy
numpy.set_printoptions(legacy='1.13')


n, m=map(int, input().split())
if (n==m):
    print(numpy.identity(n))
else:
    print(numpy.eye(n, m, k=0))

"""#### Esercizio 1.13.8
Floor, Ceil and Rint
"""

import numpy
numpy.set_printoptions(legacy='1.13')


a=numpy.array(input().split(), float)
print(numpy.floor(a))
print(numpy.ceil(a))
print(numpy.rint(a))

"""#### Esercizio 1.13.9
Sum and Prod
"""

import numpy



n, m=map(int, input().split())
a = numpy.array([input().split() for _ in range(n)], int)
som=numpy.sum(a, axis=0)
print(numpy.prod(som))

"""#### Esercizio 1.13.10
Min and Max
"""

import numpy

n, m = map(int, input().split())
a = numpy.array([input().split() for _ in range(n)], int)
print(numpy.max(numpy.min(a, axis=1), axis=0))

"""#### Esercizio 1.13.11
Mean, Var, and Std
"""

NULL

"""#### Esercizio 1.13.12
Dot and Cross
"""

import numpy

n = int(input())
a = numpy.array([input().split() for _ in range(n)], int)
b = numpy.array([input().split() for _ in range(n)], int)
print(numpy.dot(a, b))

"""#### Esercizio 1.13.13
Inner and Outer
"""

import numpy



a = numpy.array(input().split(), int)
b = numpy.array(input().split(), int)
print(numpy.inner(a, b), numpy.outer(a, b), sep='\n')

"""#### Esercizio 1.13.14
Polynomials
"""

import numpy



poly = [float(x) for x in input().split()]
x = float(input())
print(numpy.polyval(poly, x))

"""#### Esercizio 1.13.15
Linear Algebra
"""

import numpy



numpy.set_printoptions(legacy='1.13')

n = int(input())
array = numpy.array([input().split() for _ in range(n)], float)
print(numpy.linalg.det(array))

"""## **Problema 2**

#### Esercizio 2.1
Birthday Cake Candles
"""

def birthdayCakeCandles(candles):
    count=0
    massimo = max(candles)
    for i in range(len(candles)):
        if(candles[i]==massimo):
            count+=1
    return count

"""#### Esercizio 2.2
Number Line Jumps
"""

def kangaroo(x1, v1, x2, v2):
    for n in range(10000):
        if ((x1+v1)==(x2+v2)):
           return "YES"
        x1=x1+v1
        x2=x2+v2
    return "NO"

"""#### Esercizio 2.3
Viral Advertising
"""

NULL

"""#### Esercizio 2.4
Recursive Digit Sum
"""

def superDigit(n, k):
    def getsdig(n):
        tot=0
        for i in n:
            tot+=int(i)
        tot=str(tot)
        if (len(tot)==1):
            return tot
        else:
            return getsdig(tot)
    arr=str(getsdig(n)*k)
    return getsdig(arr)

"""#### Esercizio 2.5
Insertion Sort - Part 1
"""

def insertionSort1(n, arr):
    a = arr[-1]
    for i in range(n-2, -1, -1):
        if arr[i] > a:
            arr[i+1] = arr[i]
            print(' '.join(map(str, arr)))
        else:
            arr[i+1] = a
            print(' '.join(map(str, arr)))
            return
    arr[0] = a
    print(' '.join(map(str, arr)))

"""#### Esercizio 2.6
Insertion Sort - Part 2
"""

def insertionSort2(n, arr):
    for i in range(1, n):
        tmp = arr[i]
        j = i-1

        while j >= 0 and arr[j] > tmp:
            arr[j+1] = arr[j]
            j -= 1

        arr[j+1] = tmp

        print(' '.join(map(str, arr)))